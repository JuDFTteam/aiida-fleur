name: aiida-fleur

on: [push, pull_request]

jobs:

  docs:

    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Cache python dependencies
      id: cache-pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: pip-docs-${{ hashFiles('**/setup.json') }}
        restore-keys: |
          pip-docs-

    - name: Install python dependencies
      run: |
        pip install -e .[docs]
        reentry scan

    - name: Build documentation
      env:
        READTHEDOCS: 'True'
      run: |
        SPHINXOPTS='-nW' make -C docs html

  pre-commit:

    runs-on: ubuntu-18.04
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v2

    - name: Cache python dependencies
      id: cache-pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: pip-pre-commit-${{ hashFiles('**/setup.json') }}
        restore-keys: |
          pip-pre-commit-

    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install python dependencies
      run: |
        pip install .[pre-commit,testing]
        pip freeze

    - name: Run pre-commit
      run: |
        pre-commit run --all-files || (git status --short; git diff ; exit 1)

  tests:

    runs-on: ubuntu-18.04
    timeout-minutes: 30

    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        aiida-version: ['aiida-core']
        aiida-name: ['stable']
        pip-flags: ['']
        allowed-to-fail: [false]
        include:
          - python-version: 3.8
            aiida-version: 'git+https://github.com/aiidateam/aiida-core.git@develop'
            aiida-name: 'develop'
            pip-flags: '--no-deps'
            allowed-to-fail: true

    name: tests-python-${{ matrix.python-version }}-${{ matrix.aiida-name }}
    continue-on-error: ${{ matrix.allowed-to-fail }}

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_DB: test_${{ matrix.backend }}
          POSTGRES_PASSWORD: ''
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
        - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
        - 5672:5672

    steps:
    - uses: actions/checkout@v2

    - name: Cache python dependencies
      id: cache-pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: pip-${{ matrix.python-version }}-${{ matrix.aiida-name }}-tests-${{ hashFiles('**/setup.json') }}
        restore-keys: |
          pip-${{ matrix.python-version }}-${{ matrix.aiida-name }}-tests

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install postgresql-10

    - name: Install python dependencies
      run: |
        pip install --upgrade wheel setuptools
        # pip install git+https://github.com/aiidateam/aiida-testing.git@export_cache
        pip install ${{ matrix.aiida-version }}
        pip install ${{ matrix.pip-flags }} .[testing]
        pip install reentry
        reentry scan

    - name: Run pytest
      run: |
       # create fake codes for tests to work on ci
       cd ./tests/
       touch local_exe/inpgen && chmod +x local_exe/inpgen
       touch local_exe/fleur && chmod +x local_exe/fleur
       ./run_all_cov.sh

    - name: Upload report to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./tests/coverage.xml
        fail_ci_if_error: False
