name: aiida-fleur

on: [push, pull_request]

jobs:

  docs:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Cache python dependencies
      id: cache-pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: pip-docs-${{ hashFiles('**/setup.json') }}
        restore-keys: |
          pip-docs-

    - name: Install python dependencies
      run:
        pip install -e .[docs]

    - name: Build documentation
      env:
        READTHEDOCS: 'True'
      run:
        SPHINXOPTS='-nW' make -C docs html

  pre-commit:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v1

    - name: Cache python dependencies
      id: cache-pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: pip-pre-commit-${{ hashFiles('**/setup.json') }}
        restore-keys: |
          pip-pre-commit-

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install python dependencies
      run:
        pip install git+https://github.com/aiidateam/aiida-testing@export_cache
        pip install .[pre-commit,testing]
        pip freeze

    - name: Run pre-commit
      run: 
        pre-commit run --all-files || (git status --short; git diff ; exit 1)

  tests:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        python-version: ['3.8', '3.7', '3.6']

    steps:
    - uses: actions/checkout@v1

    - name: Cache python dependencies
      id: cache-pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: pip-${{ matrix.python-version }}-tests-${{ hashFiles('**/setup.json') }}
        restore-keys: |
          pip-${{ matrix.python-version }}-tests

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        wget -O - "https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc" | sudo apt-key add -
        echo 'deb https://dl.bintray.com/rabbitmq-erlang/debian bionic erlang' | sudo tee -a /etc/apt/sources.list.d/bintray.rabbitmq.list
        echo 'deb https://dl.bintray.com/rabbitmq/debian bionic main' | sudo tee -a /etc/apt/sources.list.d/bintray.rabbitmq.list
        sudo apt update
        sudo apt install postgresql postgresql-server-dev-all postgresql-client
        sudo apt install rabbitmq-server
        sudo systemctl status rabbitmq-server.service

    - name: Install python dependencies
      run: |
        pip install numpy==1.16.4
        pip install PyCifRW~=4.4
        # install aiida-testing manually
        #pip install git+https://github.com/broeder-j/aiida-testing.git@fa44c3ba4e57192fdbdee1cf3581576acc93800c
        pip install git+https://github.com/aiidateam/aiida-testing.git@export_cache
        pip install .[testing]
        reentry scan

    - name: Run pytest
      run: |
       # create fake codes for tests to work on ci
       cd ./tests/
       touch local_exe/inpgen && chmod +x local_exe/inpgen
       touch local_exe/fleur && chmod +x local_exe/fleur 
       ./run_all_cov.sh
    
    - name: Upload report to Codecov
      uses: codecov/codecov-action@v1.0.15
      with:
        file: ./tests/coverage.xml
