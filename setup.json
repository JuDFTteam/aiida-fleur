{
    "version": "1.1.3",
    "name": "aiida-fleur",
    "url": "https://github.com/JuDFTteam/aiida-fleur",
    "license": "MIT License, see LICENSE.txt file.",
    "author": "JuDFTteam",
    "author_email": "j.broeder@fz-juelich.de",
    "description": "Python FLEUR simulation package containing an AiiDA Plugin for running the FLEUR-code and its input generator. Plus some workflows and utility",
    "classifiers": [
        "Framework :: AiiDA",
        "License :: OSI Approved :: MIT License",
        "Operating System :: POSIX :: Linux",
        "Operating System :: MacOS :: MacOS X",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.5",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Environment :: Plugins",
        "Intended Audience :: Science/Research",
        "Topic :: Scientific/Engineering :: Physics",
        "Natural Language :: English"
    ],
    "keywords": "fleur aiida inpgen workflows flapw juelich dft all-electron",
    "include_package_data": true,
    "setup_requires": [
        "reentry"
    ],
    "reentry_register": true,
    "install_requires": [
        "aiida-core>=1.3.0,<2.0.0",
        "lxml >= 3.6.4",
        "pytest-cov >= 2.5.0",
        "numpy>=1.16.4,<1.20.0",
        "sympy",
        "masci-tools>=0.3.12-dev4",
        "future",
        "ase",
        "pymatgen",
        "pyhull",
	"PyCifRW~=4.4"
    ],
    "extras_require": {
        "graphs ": [
            "matplotlib"
        ],
        "docs": [
            "Sphinx",
            "docutils",
            "sphinx_rtd_theme"
        ],
        "pre-commit": [
            "pre-commit>=2.6.0",
            "yapf~=0.30",
            "pylint>=2.5"
        ],
        "testing" : [
            "pytest>=2.9",
            "pytest-timeout",
            "pytest-cov>= 2.5.0",
            "pgtest",
            "pytest-regressions>=1.0"
        ]
    },
    "entry_points": {
        "aiida.calculations": [
            "fleur.fleur = aiida_fleur.calculation.fleur:FleurCalculation",
            "fleur.inpgen = aiida_fleur.calculation.fleurinputgen:FleurinputgenCalculation"
        ],
        "aiida.data": [
            "fleur.fleurinp = aiida_fleur.data.fleurinp:FleurinpData",
            "fleur.fleurinpmodifier = aiida_fleur.data.fleurinpmodifier:FleurinpModifier"
        ],
        "aiida.parsers": [
            "fleur.fleurparser = aiida_fleur.parsers.fleur:FleurParser",
            "fleur.fleurinpgenparser = aiida_fleur.parsers.fleur_inputgen:Fleur_inputgenParser"
        ],
        "aiida.workflows": [
            "fleur.scf = aiida_fleur.workflows.scf:FleurScfWorkChain",
            "fleur.dos = aiida_fleur.workflows.dos:fleur_dos_wc",
            "fleur.banddos = aiida_fleur.workflows.banddos:FleurBandDosWorkChain",
            "fleur.eos = aiida_fleur.workflows.eos:FleurEosWorkChain",
            "fleur.init_cls = aiida_fleur.workflows.initial_cls:fleur_initial_cls_wc",
            "fleur.corehole = aiida_fleur.workflows.corehole:fleur_corehole_wc",
            "fleur.mae = aiida_fleur.workflows.mae:FleurMaeWorkChain",
            "fleur.mae_conv = aiida_fleur.workflows.mae_conv:FleurMaeConvWorkChain",
            "fleur.ssdisp = aiida_fleur.workflows.ssdisp:FleurSSDispWorkChain",
            "fleur.ssdisp_conv = aiida_fleur.workflows.ssdisp_conv:FleurSSDispConvWorkChain",
            "fleur.dmi = aiida_fleur.workflows.dmi:FleurDMIWorkChain",
            "fleur.relax = aiida_fleur.workflows.relax:FleurRelaxWorkChain",
            "fleur.create_magnetic = aiida_fleur.workflows.create_magnetic_film:FleurCreateMagneticWorkChain",
            "fleur.base_relax = aiida_fleur.workflows.base_relax:FleurBaseRelaxWorkChain",
            "fleur.base = aiida_fleur.workflows.base_fleur:FleurBaseWorkChain"
        ],
        "console_scripts": [
            "aiida-fleur = aiida_fleur.cmdline:cmd_root"
        ]
    }
}
