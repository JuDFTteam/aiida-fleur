{
    "version" : "1.0.0",
    "name" : "aiida-fleur",
    "url" : "https://github.com/JuDFTteam/aiida-fleur",
    "license" : "MIT License, see LICENSE.txt file.",
    "author" : "JuDFTteam",
    "author_email" : "j.broeder@fz-juelich.de",
    "description" : "Python FLEUR simulation package containing an AiiDA Plugin for running the FLEUR-code and its input generator. Plus some workflows and utility",
    "classifiers" : [
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.4",
        "Programming Language :: Python :: 3.5",
        "Programming Language :: Python :: 3.6",
        "Development Status :: 4 - Beta",
        "Environment :: Plugins",
        "Intended Audience :: Science/Research",
        "Topic :: Scientific/Engineering :: Physics",
        "Natural Language :: English"
    ],
    "keywords" : "fleur aiida inpgen workflows flapw juelich dft all-electron",
    "include_package_data" : true,
    "setup_requires" : [
            "reentry"
        ],
    "reentry_register" : true,
    "install_requires" : [
            "aiida-core >= 1.0.0b1[atomic_tools]",
            "lxml >= 3.6.4",
            "pytest-cov >= 2.5.0",
            "pytest >= 2.9",
            "pgtest",
            "numpy>=1.16.0",
            "sympy",
            "masci-tools",
            "future"
    ],
    "extras_require" : {
            "graphs ": ["matplotlib",
                        "masci-tools"]
        },
    "entry_points" : {
        "aiida.calculations" : [
            "fleur.fleur = aiida_fleur.calculation.fleur:FleurCalculation",
            "fleur.inpgen = aiida_fleur.calculation.fleurinputgen:FleurinputgenCalculation"
        ],
        "aiida.data" : [
                "fleur.fleurinp = aiida_fleur.data.fleurinp:FleurinpData",
                "fleur.fleurinpmodifier = aiida_fleur.data.fleurinpmodifier:FleurinpModifier"
        ],
        "aiida.parsers" : [
                "fleur.fleurparser = aiida_fleur.parsers.fleur:FleurParser",
                "fleur.fleurinpgenparser = aiida_fleur.parsers.fleur_inputgen:Fleur_inputgenParser"
        ],
        "aiida.workflows" : [
            "fleur.scf = aiida_fleur.workflows.scf:fleur_scf_wc",
            "fleur.dos = aiida_fleur.workflows.dos:fleur_dos_wc",
            "fleur.band = aiida_fleur.workflows.band:fleur_band_wc",
            "fleur.eos = aiida_fleur.workflows.eos:fleur_eos_wc",
            "fleur.dummy = aida_fleur.workflows.dummy:dummy_wc",
            "fleur.sub_dummy = aida_fleur.workflows.dummy:sub_dummy_wc",
            "fleur.init_cls = aiida_fleur.workflows.initial_cls:fleur_initial_cls_wc",
            "fleur.corehole = aiida_fleur.workflows.corehole:fleur_corehole_wc",
            "fleur.corelevel = aiida_fleur.workflows.corelevel:fleur_corelevel_wc",
            "fleur.mae = aiida_fleur.workflows.mae:fleur_mae_wc",
	    "fleur.spst = aiida_fleur.workflows.spst:fleur_spst_wc",
	    "fleur.dmi = aiida_fleur.workflows.dmi:fleur_dmi_wc"
        ]
    }
}
